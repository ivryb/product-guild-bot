import type { Context, NextFunction } from "./deps.node.js";
import { type Stringable } from "./format.js";
type Tail<T extends Array<any>> = T extends [head: infer E1, ...tail: infer E2] ? E2 : [];
/**
 * Context flavor for `Context` that will be hydrated with
 * an additional set of reply methods from `hydrateReply`
 */
type ParseModeFlavor<C extends Context> = C & {
    replyFmt: (stringLike: Stringable, ...args: Tail<Parameters<C["reply"]>>) => ReturnType<C["reply"]>;
    replyWithHTML: C["reply"];
    replyWithMarkdown: C["reply"];
    replyWithMarkdownV1: C["reply"];
    replyWithMarkdownV2: C["reply"];
};
/**
 * @deprecated Use ParseModeFlavor instead of ParseModeContext
 */
type ParseModeContext<C extends Context = Context> = ParseModeFlavor<C>;
/**
 * Hydrates a context with an additional set of reply methods
 * @param ctx The context to hydrate
 * @param next The next middleware function
 */
declare const middleware: <C extends Context>(ctx: ParseModeFlavor<C>, next: NextFunction) => Promise<void>;
export { middleware as hydrateReply, type ParseModeFlavor, type ParseModeContext };
